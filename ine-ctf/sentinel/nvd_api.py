import requests

def read_executable_paths(file_path):
    with open(file_path, 'r') as file:
        return [line.strip() for line in file]

def query_nvd(executable_name):
    # Updated NVD API endpoint for version 2.0
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keyword={executable_name}"
    response = requests.get(url)
    return response.json()

def check_vulnerabilities(executable_paths):
    vulnerabilities_report = {}
    for path in executable_paths:
        executable_name = path.split('\\')[-1]
        print(f"Checking vulnerabilities for {executable_name}")
        result = query_nvd(executable_name)
        if 'result' in result and 'CVE_Items' in result['result']:
            # Extracting CVE IDs from the API response
            vulnerabilities = [item['cve']['CVE_data_meta']['ID'] for item in result['result']['CVE_Items']]
            vulnerabilities_report[executable_name] = vulnerabilities
        else:
            vulnerabilities_report[executable_name] = "No known vulnerabilities or API error"

    return vulnerabilities_report

def write_report(report, output_file_path):
    with open(output_file_path, 'w') as file:
        for executable, vulnerabilities in report.items():
            vulnerabilities_detail = ', '.join(vulnerabilities) if isinstance(vulnerabilities, list) else vulnerabilities
            file.write(f"{executable}: {vulnerabilities_detail}\n")

# Example usage
exec_paths_file = 'unique_executable_paths.txt'  # Path to the file containing executable paths
report_file_path = 'vulnerability_report.txt'   # Output path for the vulnerability report

# Read executable paths
exec_paths = read_executable_paths(exec_paths_file)

# Check for vulnerabilities
report = check_vulnerabilities(exec_paths)

# Write the report to a file
write_report(report, report_file_path)

print(f"Vulnerability report has been saved to {report_file_path}.")
