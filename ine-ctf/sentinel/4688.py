import re
import csv

def parse_security_log(file_path):
    # Regular expressions for parsing the log
    event_start_regex = re.compile(r"^Event number\s+:\s+(\d+)")
    creation_time_regex = re.compile(r"^Creation time\s+:\s+(.+)$")
    written_time_regex = re.compile(r"^Written time\s+:\s+(.+)$")
    computer_name_regex = re.compile(r"^Computer name\s+:\s+(.+)$")
    source_name_regex = re.compile(r"^Source name\s+:\s+(.+)$")
    event_id_regex = re.compile(r"^Event identifier\s+:\s+0x[0-9a-fA-F]+ \(4688\)")
    string_regex = re.compile(r"^String: \d+\s+:\s+(.+)$")

    events = []
    current_event = {}
    parsing_4688 = False

    # Read file and extract required information
    with open(file_path, 'r') as file:
        for line in file:
            line = line.strip()
            if event_start_match := event_start_regex.match(line):
                # New event started, reset parsing flag and store current event if it's 4688
                if parsing_4688:
                    events.append(current_event)
                    current_event = {}
                parsing_4688 = False
                current_event['Event number'] = event_start_match.group(1)
            elif creation_time_match := creation_time_regex.match(line):
                current_event['Creation time'] = creation_time_match.group(1)
            elif written_time_match := written_time_regex.match(line):
                current_event['Written time'] = written_time_match.group(1)
            elif computer_name_match := computer_name_regex.match(line):
                current_event['Computer name'] = computer_name_match.group(1)
            elif source_name_match := source_name_regex.match(line):
                current_event['Source name'] = source_name_match.group(1)
            elif event_id_regex.match(line):
                # This is an event 4688, start parsing details
                parsing_4688 = True
            elif parsing_4688 and (string_match := string_regex.match(line)):
                # Collect command executed or other relevant string details
                current_event.setdefault('Commands', []).append(string_match.group(1))

    # Adding last event if it's 4688
    if parsing_4688:
        events.append(current_event)

    return events

def save_events_to_csv(events, output_file):
    # Define CSV file headers
    headers = ['Event number', 'Creation time', 'Written time', 'Computer name', 'Source name', 'Commands']

    # Write data to CSV
    with open(output_file, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=headers)
        writer.writeheader()
        for event in events:
            # Flatten commands into a single string for CSV
            event['Commands'] = '|'.join(event['Commands'])
            writer.writerow(event)

# Example usage
log_file_path = 'security.log'
parsed_events = parse_security_log(log_file_path)
output_csv_path = 'parsed_events.csv'
save_events_to_csv(parsed_events, output_csv_path)
print(f"Data has been saved to {output_csv_path}.")
