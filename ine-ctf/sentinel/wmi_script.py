import re

def read_log_data(filepath):
    """
    Reads the event log data from a file.
    """
    try:
        with open(filepath, 'r') as file:
            return file.readlines()
    except FileNotFoundError:
        print(f"Error: The file {filepath} was not found.")
        return []

def parse_log_data(lines):
    """
    Parses raw log data into a list of dictionaries.
    """
    event_pattern = re.compile(r"Event number\s+:\s+(\d+)")
    events = []
    current_event = {}

    for line in lines:
        if event_pattern.match(line):
            if current_event:
                events.append(current_event)
                current_event = {}
            current_event['Event number'] = event_pattern.search(line).group(1)
        else:
            if ':' in line:
                key, value = map(str.strip, line.split(':', 1))
                current_event[key] = value

    if current_event:
        events.append(current_event)

    return events

def filter_events_by_id(events, event_id='4688'):
    """
    Filters events by event identifier and looks for command line entries.
    """
    filtered_events = []
    for event in events:
        if event.get('Event identifier', '').endswith(f"({event_id})") and 'Command Line' in event:
            filtered_events.append(event)
    return filtered_events

def extract_wmi_activities(events):
    """
    Extracts events that include WMI-related command line activities.
    """
    wmi_pattern = re.compile(r"wmi", re.IGNORECASE)
    wmi_events = [event for event in events if wmi_pattern.search(event['Command Line'])]
    return wmi_events

def save_to_file(events, filename):
    """
    Saves the list of events to a file.
    """
    with open(filename, 'w') as file:
        for event in events:
            for key, value in event.items():
                file.write(f"{key}: {value}\n")
            file.write("\n")  # Adds a newline to separate events

def main():
    log_path = 'security.log'
    log_lines = read_log_data(log_path)
    
    if log_lines:
        events = parse_log_data(log_lines)
        event_id_4688_events = filter_events_by_id(events)
        
        if event_id_4688_events:
            wmi_events = extract_wmi_activities(event_id_4688_events)
            if wmi_events:
                save_to_file(wmi_events, 'wmi_activities.txt')
                print("WMI activities saved to 'wmi_activities.txt'.")
            else:
                print("No WMI-related activities found.")
        else:
            print("No events with Event ID 4688 and command line activities found.")
    else:
        print("Log file is empty or could not be read.")

if __name__ == "__main__":
    main()
